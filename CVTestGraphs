import numpy as np
import matplotlib.pyplot as plt
import pylab

#value for error lines.
# Points outside these lines are off by this amount
error = 0.5

##sets rows and columns of graph
def SetRowColumn(r,c):
    global FIGROW
    global FIGCOL
    FIGROW = r
    FIGCOL = c
    return

##sets the rows and columns then calls the plotting methods
def simplemultiDPlot(Yt,Ytp,YT,YTP,r=2,c=2,i=1,j=2,k=3):
    SetRowColumn(r,c)
    errorPlotCombined(Yt,Ytp,YT,YTP,n=k,s="Y calculated vs Y actual",
              xl='Actual Values',yl="Calclulated Values")

##plots the training and testing data together
def errorPlotCombined(Y1,Yp1,Y2,Yp2, n=1,s="Calculated vs Actual",
              xl='Actual Values',yl="Calclulated Values",legend = True):
    truemin = min(min(min(Y1),min(Yp1)),min(min(Y2),min(Yp2)))
    truemax = max(max(max(Y1),max(Yp1)),max(max(Y2),max(Yp2)))
    if truemin < 0: T = np.linspace(1.1*truemin,1.1*truemax)
    else:        T = np.linspace(truemin-1.1*truemin,1.1*truemax)
    
    
    plt.subplot(FIGROW,FIGCOL,n)

    plt.plot(Y1,Yp1,'og',label = "Train Data")
    plt.plot(Y2,Yp2,'or',label = "Test Data")

    plt.plot(T,T,'-',color='b', label = "± 0 units")
    plt.plot(T,T+error,'--b', label = "± "+str(error)+" unit")
    plt.plot(T,T-error,'--b')
    setAxes([min(Y1),min(Y2)],[min(Yp1),min(Yp2)],s,xl,yl,legend)
    pylab.xlim(xmin= truemin-0.1*truemin, xmax = 1.1 * truemax)
    pylab.ylim(ymin= truemin-0.1*truemin, ymax = 1.1 * truemax)
    plt.grid()
    return

#formats the axis
def setAxes(x,y,s1="Title",s2="X data",s3= "Ydata",legend = True):
    plt.title(s1)
    ax = plt.gca()
    if min(y) < 0: #set x-axis
        ax.spines['top'].set_color('none')
        ax.spines['bottom'].set_position(('data',0))
        plt.text(0.5, -0.025, s2, ha='center', va='center',
                 transform=ax.transAxes)
    else:
        plt.text(0.5, -0.1, s2, ha='center', va='center',
                 transform=ax.transAxes)

    if min(x) < 0: #set y-axis
        ax.spines['right'].set_color('none')
        ax.spines['left'].set_position(('data',0))
        plt.text(-0.05, 0.5, s3, ha='center', va='center',
                 rotation = 'vertical', transform=ax.transAxes)
    else:
        plt.text(-0.12, 0.5, s3, ha='center', va='center',
                 rotation = 'vertical', transform=ax.transAxes)
    if legend: plt.legend(loc=0)
    return

#main
#parameters:
#       Ytmax - True Y training values of worst fit
#       Ytpmax - Predicted Y training values of worst fit
#       YTmax - True Y testing values of worst fit
#       YTpmax - Predicted Y testing values of worst fit
#       Ytmin - True Y training values of best fit
#       Ytpmin - Predicted Y training values of best fit
#       YTmin - True Y testing values of best fit
#       YTpmin - Predicted Y testing values of best fit
def plotmain(Ytmax,Ytpmax,YTmax,YTpmax,Ytmin,Ytpmin,YTmin,YTpmin):
    fig = plt.figure()
    simplemultiDPlot(Ytmax,Ytpmax,YTmax,YTpmax,2,1,1,2,1)
    simplemultiDPlot(Ytmin,Ytpmin,YTmin,YTpmin,2,1,4,5,2)
    ax = fig.add_axes([0,0,1,1])
    plt.text(0.07, 0.725, "Worst Fit", ha='center', va='center',
             rotation = 'vertical', size = 18,transform=ax.transAxes)
    plt.text(0.07, 0.275, "Best Fit", ha='center', va='center',
             rotation = 'vertical', size = 18, transform=ax.transAxes)
    ax.set_axis_off()
    plt.show()
